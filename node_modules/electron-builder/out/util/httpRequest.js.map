{
  "version": 3,
  "file": "httpRequest.js",
  "sourceRoot": "",
  "sources": [
    "../../src/util/httpRequest.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;;;;;;;;;;AAsIA,AAAmB;;sEACnB,AAAK;AACH,YAAI,AAAI,OAAG,AAAE;AACb,YAAI,AAAC;AACH,AAAI,mBAAG,MAAM,AAAQ,8CAAC,AAAI,MAAC,AAAI,KAAC,AAAO,AAAE,oCAAE,AAAQ,AAAC,WAAE,AAAO,AAAC,AAChE;AACA,UAAA,AAAK,AAAC,OAAC,AAAO,AAAC,SAAC,AAAC;AACf,AAAM,mBAAC,AAAI,AACb;AAAC;AAED,AAAE,AAAC,YAAC,CAAC,AAAI,AAAC,MAAC,AAAC;AACV,AAAM,mBAAC,AAAI,AACb;AAAC;AAED,YAAI,AAAC;AACH,kBAAM,AAAM,SAAG,AAAQ,iCAAC,AAAI,AAAC;AAC7B,AAAM,mBAAC,AAAM,OAAC,AAAa,AAAC,kBAAI,AAAM,OAAC,AAAK,AAC9C;AACA,UAAA,AAAK,AAAC,OAAC,AAAC,AAAC,GAAC,AAAC;AACT,AAAwD;AACxD,AAAO,oBAAC,AAAI,KAAC,AAAC,AAAC;AACf,AAAM,mBAAC,AAAI,AACb;AAAC,AACH;AAAC;;;;;;AAED,AAAiB;;;;uEACjB,AAAK;AACH,YAAI,AAAW,cACb,AAAO,QAAC,AAAG,IAAC,AAAsB,0BAClC,AAAO,QAAC,AAAG,IAAC,AAAW,eAAI,AAAO,QAAC,AAAG,IAAC,AAAW,eAClD,AAAO,QAAC,AAAG,IAAC,AAAgB;AAE9B,AAAE,AAAC,YAAC,CAAC,AAAW,AAAC,aAAC,AAAC;AACjB,AAAW,0BAAG,MAAM,AAAY,AAAE;AAClC,AAAE,AAAC,gBAAC,CAAC,AAAW,AAAC,aAAC,AAAC;AACjB,AAAM,uBAAC,AAAI,AACb;AAAC,AACH;AAAC;AAED,cAAM,AAAK,QAAG,AAAQ,iCAAC,AAAW,AAAC;AAEnC,cAAM,AAAa,gBAAG,AAAK,MAAC,AAAQ,aAAK,AAAQ,WAAG,AAAO,UAAG,AAAM;AACpE,AAAM,uBAAS,AAAc,AAAC,AAAC,6BAAY,AAAa,aAAE,AAAC;AACzD,AAAK;AACH,AAAI,sBAAE,AAAK,MAAC,AAAI,AAAI,SAAC,AAAa,kBAAK,AAAO,UAAG,AAAG,MAAG,AAAE,AAAC;AAC1D,AAAI,sBAAE,AAAK,MAAC,AAAQ;AACpB,AAAS,2BAAE,AAAK,MAAC,AAAI,AACtB,AACF,AAAC,AACJ;AANW;AADmD,SAArD,AAAO;AAOf;;;;;;;;;;;;;;AArLD,AAAO,AAAK,AAAK,AAAM,AAAO;;;;;;AAC9B,AAAO,AAAE,AAAiB,AAAE,AAAS,AAAE,AAAQ,AAAE,AAAM,AAAY;;;;;;AACnE,AAAO,AAAE,AAAK,AAAI,AAAQ,AAAE,AAAM,AAAK,AACvC,AAAO,AAAe,AAAM,AAAgB;;;;AAC5C,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAE,AAAU,AAAE,AAAM,AAAQ;;;;;;AACnC,AAAO,AAAE,AAAS,AAAE,AAAM,AAAQ;;;;;;AAClC,AAAO,AAAE,AAAO,AAAE,AAAM,AAAI;;;;;;AAC5B,AAAO,AAAE,AAAK,AAAI,AAAQ,AAAE,AAAM,AAAK;;;;;;;;AAEvC,MAAM,AAAY,eAAG,AAAE;AAOvB,IAAI,AAAU,aAA0B,AAAI,AAE5C,AAAM;kBAAmB,AAAW,KAAE,AAAmB,aAAE,AAAgC;AACzF,AAAM,YAA2B,AAAU,AAAI,eAAC,AAAU,aAAG,AAAW,AAAE,AAAC,AAAC,gBACzE,AAAI,KAAC,AAAE,4DAAwB,UAAU,AAAO,SAAE,AAAM;AACvD,AAAU,mBAAC,AAAG,KAAE,AAAW,aAAE,AAAC,GAAE,AAAO,WAAI,AAAE,IAAE,AAAE,IAAE,AAAK;AACtD,AAAE,AAAC,gBAAC,AAAK,SAAI,AAAI,AAAC,MAAC,AAAC;AAClB,AAAO,wBAAC,AAAW,AAAC,AACtB;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAM,uBAAC,AAAK,AAAC,AACf;AAAC,AACH;AAAC,AAAC,AACJ;AAAC,AAAC,AAAC,AACP,KAVgB,AAAI,AAAe,CADD;AAWjC,AAED,AAAM;2BAA4B,AAAsB,SAAE,AAAgC;AACxF,AAAO,YAAC,AAAE,GAAC,AAAQ,UAAE,UAAU,AAAc;AAC3C,AAAM,eAAC,AAAU,WAAC,AAAE,KAAG,AAAI,MAAE;AAC3B,AAAQ,qBAAC,IAAI,AAAK,MAAC,AAAmB,AAAC,AAAC;AACxC,AAAO,oBAAC,AAAK,AAAE,AACjB;AAAC,AAAC,AACJ;AAAC,AAAC,AACJ;AAAC;AAED,oBAAoB,AAAW,KAAE,AAAmB,aAAE,AAAqB,eAAE,AAAwB,SAAE,AAAY,OAAE,AAAuC;AAC1J,UAAM,AAAgB,mBAAG,AAAO,QAAC,AAAe,kBAAG,AAAe,kDAAC,AAAO,AAAE,YAAG,AAAS,+CAAC,AAAI,MAAC,AAAO,QAAC,AAAW,AAAC,AAAC;AAEnH,UAAM,AAAS,YAAG,AAAQ,iCAAC,AAAG,AAAC;AAC/B,AAAgF;AAChF,UAAM,AAAO,oCAAS,AAAO;AAC3B,AAAQ,kBAAE,AAAS,UAAC,AAAQ;AAC5B,AAAI,cAAE,AAAS,UAAC,AAAI;AACpB,AAAO;AACL,AAAY,0BAAE,AAAkB,AACjC;AAFQ;AAGT,AAAK,eAAE,AAAK,AACb;AAP6B,KAAd,AAAK,EAOjB,AAAyB,QAA1B;AACD,AAAE,AAAC,YAAC,AAAQ,SAAC,AAAU,cAAI,AAAG,AAAC,KAAC,AAAC;AAC/B,AAAQ,qBAAC,IAAI,AAAK,AAAC,2BAAoB,AAAG,kBAAa,AAAQ,SAAC,AAAU,iBAAK,AAAQ,SAAC,AAAa,aAAE,AAAC,AAAC;AACzG,AAAM,AACR;AAAC;AAED,cAAM,AAAW,cAAG,AAAQ,SAAC,AAAO,QAAC,AAAQ;AAC7C,AAAE,AAAC,YAAC,AAAW,eAAI,AAAI,AAAC,MAAC,AAAC;AACxB,AAAE,AAAC,gBAAC,AAAa,gBAAG,AAAY,AAAC,cAAC,AAAC;AACjC,AAAU,2BAAC,AAAW,aAAE,AAAW,aAAE,AAAa,AAAE,iBAAE,AAAO,SAAE,AAAK,OAAE,AAAQ,AAAC,AACjF;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAQ,yBAAC,IAAI,AAAK,MAAC,AAAwB,2BAAG,AAAY,eAAG,AAAG,AAAC,AAAC,AACpE;AAAC;AACD,AAAM,AACR;AAAC;AAED,cAAM,AAAU,aAAG,AAAQ,SAAC,AAAO,QAAC,AAAiB,AAAC;AACtD,AAAE,AAAC,YAAC,AAAU,cAAI,AAAI,QAAI,AAAO,QAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AAC/C,AAAmD;AACnD,AAAE,AAAC,gBAAC,AAAU,cAAI,AAAI,AAAC,MAAC,AAAC;AACvB,sBAAM,IAAI,AAAK,MAAC,AAAkF,AAAC,AACrG;AAAC,AACD,AAAI,mBAAC,AAAE,AAAC,IAAC,AAAU,eAAK,AAAO,QAAC,AAAI,AAAC,MAAC,AAAC;AACrC,sBAAM,IAAI,AAAK,AAAC,sCAA+B,AAAO,QAAC,AAAI,kBAAY,AAAU,UAA2B,AAAC,AAC/G;AAAC,AACH;AAAC;AAED,AAAgB,yBACb,AAAI,KAAC;AACJ,kBAAM,AAAO,UAAG,AAAiB,uDAAC,AAAW,AAAC;AAC9C,AAAE,AAAC,gBAAC,AAAO,QAAC,AAAI,QAAI,AAAI,AAAC,MAAC,AAAC;AACzB,AAAQ,yBAAC,AAAI,KAAC,AAAO,AAAC,AACxB;AAAC,AACD,AAAI,mBAAC,AAAC;AACJ,AAAQ,yBACL,AAAI,KAAC,IAAI,AAAe,gBAAC,AAAO,QAAC,AAAI,AAAC,AAAC,OACvC,AAAI,KAAC,AAAO,AAAC,AAClB;AAAC;AAED,AAAO,oBAAC,AAAE,GAAC,AAAQ,UAAE,MAAY,AAAO,QAAC,AAAM,MAAC,AAAQ,AAAC,AAAC,AAC5D;AAAC,AAAC,WACD,AAAK,MAAC,AAAQ,AAAC;AAElB,YAAI,AAAK,QAAG,AAAK;AACjB,AAAQ,iBAAC,AAAE,GAAC,AAAK,OAAE;AACjB,AAAK,oBAAG,AAAI,AACd;AAAC,AAAC;AAEF,AAAQ,iBAAC,AAAE,GAAC,AAAO,SAAE;AACnB,AAAE,AAAC,gBAAC,CAAC,AAAK,AAAC,OAAC,AAAC;AACX,AAAQ,yBAAC,IAAI,AAAK,MAAC,AAAiB,AAAC,AAAC,AACxC;AAAC,AACH;AAAC,AAAC,AACJ;AAAC,AAAC;AACF,AAAiB,sBAAC,AAAO,SAAE,AAAQ,AAAC;AACpC,AAAO,YAAC,AAAE,GAAC,AAAO,SAAE,AAAQ,AAAC;AAC7B,AAAO,YAAC,AAAG,AAAE,AACf;AAAC;AAED,MAAsB,AAAQ,AAAS;AAGrC,gBAAoB,AAAgB;AACnC,AAAK,AAAE;AADY,aAAQ,WAAR,AAAQ,AAAQ;AAF3B,aAAQ,WAAG,AAAU,4CAAC,AAAQ,AAAC,AAIxC;AAAC;AAED,AAAU,eAAC,AAAU,OAAE,AAAgB,UAAE,AAAkB;AACzD,AAAI,aAAC,AAAQ,SAAC,AAAM,OAAC,AAAK,AAAC;AAC3B,AAAQ,iBAAC,AAAI,MAAE,AAAK,AAAC,AACvB;AAAC;AAED,AAAM,WAAC,AAAkB;AACvB,cAAM,AAAI,OAAG,AAAI,KAAC,AAAQ,SAAC,AAAM,OAAC,AAAK,AAAC;AACxC,AAAQ,iBAAC,AAAI,SAAK,AAAI,KAAC,AAAQ,WAAG,AAAI,OAAG,IAAI,AAAK,AAAC,2CAAoC,AAAI,KAAC,AAAQ,mBAAS,AAAI,IAAE,AAAC,AAAC,AACvH;AAAC,AACF",
  "sourcesContent": [
    "import { Socket } from \"net\"\nimport { IncomingMessage, ClientRequest, Agent } from \"http\"\nimport * as https from \"https\"\nimport { createWriteStream, ensureDir, readFile } from \"fs-extra-p\"\nimport { parse as parseUrl } from \"url\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport * as path from \"path\"\nimport { createHash } from \"crypto\"\nimport { Transform } from \"stream\"\nimport { homedir } from \"os\"\nimport { parse as parseIni } from \"ini\"\n\nconst maxRedirects = 10\n\nexport interface DownloadOptions {\n  skipDirCreation?: boolean\n  sha2?: string\n}\n\nlet httpsAgent: Promise<Agent> | null = null\n\nexport function download(url: string, destination: string, options?: DownloadOptions | null): Promise<string> {\n  return <BluebirdPromise<string>>(httpsAgent || (httpsAgent = createAgent()))\n    .then(it => new BluebirdPromise(function (resolve, reject) {\n      doDownload(url, destination, 0, options || {}, it, error => {\n        if (error == null) {\n          resolve(destination)\n        }\n        else {\n          reject(error)\n        }\n      })\n    }))\n}\n\nexport function addTimeOutHandler(request: ClientRequest, callback: (error: Error) => void) {\n  request.on(\"socket\", function (socket: Socket) {\n    socket.setTimeout(60 * 1000, () => {\n      callback(new Error(\"Request timed out\"))\n      request.abort()\n    })\n  })\n}\n\nfunction doDownload(url: string, destination: string, redirectCount: number, options: DownloadOptions, agent: Agent, callback: (error: Error | null) => void) {\n  const ensureDirPromise = options.skipDirCreation ? BluebirdPromise.resolve() : ensureDir(path.dirname(destination))\n\n  const parsedUrl = parseUrl(url)\n  // user-agent must be specified, otherwise some host can return 401 unauthorised\n  const request = https.request({\n    hostname: parsedUrl.hostname,\n    path: parsedUrl.path,\n    headers: {\n      \"User-Agent\": \"electron-builder\"\n    },\n    agent: agent,\n  }, (response: IncomingMessage) => {\n    if (response.statusCode >= 400) {\n      callback(new Error(`Cannot download \"${url}\", status ${response.statusCode}: ${response.statusMessage}`))\n      return\n    }\n\n    const redirectUrl = response.headers.location\n    if (redirectUrl != null) {\n      if (redirectCount < maxRedirects) {\n        doDownload(redirectUrl, destination, redirectCount++, options, agent, callback)\n      }\n      else {\n        callback(new Error(\"Too many redirects (> \" + maxRedirects + \")\"))\n      }\n      return\n    }\n\n    const sha2Header = response.headers[\"X-Checksum-Sha2\"]\n    if (sha2Header != null && options.sha2 != null) {\n      // todo why bintray doesn't send this header always\n      if (sha2Header == null) {\n        throw new Error(\"checksum is required, but server response doesn't contain X-Checksum-Sha2 header\")\n      }\n      else if (sha2Header !== options.sha2) {\n        throw new Error(`checksum mismatch: expected ${options.sha2} but got ${sha2Header} (X-Checksum-Sha2 header)`)\n      }\n    }\n\n    ensureDirPromise\n      .then(() => {\n        const fileOut = createWriteStream(destination)\n        if (options.sha2 == null) {\n          response.pipe(fileOut)\n        }\n        else {\n          response\n            .pipe(new DigestTransform(options.sha2))\n            .pipe(fileOut)\n        }\n\n        fileOut.on(\"finish\", () => (<any>fileOut.close)(callback))\n      })\n      .catch(callback)\n\n    let ended = false\n    response.on(\"end\", () => {\n      ended = true\n    })\n\n    response.on(\"close\", () => {\n      if (!ended) {\n        callback(new Error(\"Request aborted\"))\n      }\n    })\n  })\n  addTimeOutHandler(request, callback)\n  request.on(\"error\", callback)\n  request.end()\n}\n\nclass DigestTransform extends Transform {\n  readonly digester = createHash(\"sha256\")\n\n  constructor(private expected: string) {\n   super()\n  }\n\n  _transform(chunk: any, encoding: string, callback: Function) {\n    this.digester.update(chunk)\n    callback(null, chunk)\n  }\n\n  _flush(callback: Function): void {\n    const hash = this.digester.digest(\"hex\")\n    callback(hash === this.expected ? null : new Error(`SHA2 checksum mismatch, expected ${this.expected}, got ${hash}`))\n  }\n}\n\n// only https proxy\nasync function proxyFromNpm() {\n  let data = \"\"\n  try {\n    data = await readFile(path.join(homedir(), \".npmrc\"), \"utf-8\")\n  }\n  catch (ignored) {\n    return null\n  }\n\n  if (!data) {\n    return null\n  }\n\n  try {\n    const config = parseIni(data)\n    return config[\"https-proxy\"] || config.proxy\n  }\n  catch (e) {\n    // used in nsis auto-updater, do not use .util.warn here\n    console.warn(e)\n    return null\n  }\n}\n\n// only https url\nasync function createAgent() {\n  let proxyString: string =\n    process.env.npm_config_https_proxy ||\n    process.env.HTTPS_PROXY || process.env.https_proxy ||\n    process.env.npm_config_proxy\n\n  if (!proxyString) {\n    proxyString = await proxyFromNpm()\n    if (!proxyString) {\n      return null\n    }\n  }\n\n  const proxy = parseUrl(proxyString)\n\n  const proxyProtocol = proxy.protocol === \"https:\" ? \"Https\" : \"Http\"\n  return require(\"tunnel-agent\")[`httpsOver${proxyProtocol}`]({\n    proxy: {\n      port: proxy.port || (proxyProtocol === \"Https\" ? 443 : 80),\n      host: proxy.hostname,\n      proxyAuth: proxy.auth\n    }\n  })\n}"
  ]
}
