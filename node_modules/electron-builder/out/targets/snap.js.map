{
  "version": 3,
  "file": "snap.js",
  "sourceRoot": "",
  "sources": [
    "../../src/targets/snap.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import { toDebArch } from \"../platformPackager\"\nimport { Arch } from \"../metadata\"\nimport { LinuxTargetHelper } from \"./LinuxTargetHelper\"\nimport { LinuxPackager } from \"../linuxPackager\"\nimport { log } from \"../util/log\"\nimport { SnapOptions } from \"../options/linuxOptions\"\nimport { emptyDir, writeFile, rename, copy } from \"fs-extra-p\"\nimport * as path from \"path\"\nimport { safeDump } from \"js-yaml\"\nimport { spawn } from \"../util/util\"\nimport { homedir } from \"os\"\nimport { Target } from \"./targetFactory\"\n\nexport default class SnapTarget extends Target {\n  private readonly options: SnapOptions = Object.assign({}, this.packager.platformSpecificBuildOptions, (<any>this.packager.devMetadata.build)[this.name])\n\n  constructor(name: string, private packager: LinuxPackager, private helper: LinuxTargetHelper, private outDir: string) {\n    super(name)\n  }\n\n  async build(appOutDir: string, arch: Arch): Promise<any> {\n    log(`Building Snap for arch ${Arch[arch]}`)\n\n    const packager = this.packager\n    const appInfo = packager.appInfo\n    const options = this.options\n\n    const snapDir = `${appOutDir}-snap`\n    await emptyDir(snapDir)\n\n    const snap: any = {}\n    snap.name = packager.executableName\n    snap.version = appInfo.version\n    snap.summary = options.summary || appInfo.productName\n    snap.description = this.helper.getDescription(options)\n    snap.confinement = options.confinement || \"strict\"\n    snap.grade = options.grade || \"stable\"\n\n    await this.helper.icons\n    if (this.helper.maxIconPath != null) {\n      snap.icon = \"setup/gui/icon.png\"\n      await copy(this.helper.maxIconPath, path.join(snapDir, \"setup\", \"gui\", \"icon.png\"))\n    }\n\n    if (options.assumes != null) {\n      if (!Array.isArray(options.assumes)) {\n        throw new Error(\"snap.assumes must be an array of strings\")\n      }\n      snap.assumes = options.assumes\n    }\n\n    snap.apps = {\n      [snap.name]: {\n        command: `desktop-launch $SNAP/${packager.executableName}`,\n        plugs: [\n          \"home\", \"unity7\", \"x11\", \"browser-support\", \"network\", \"gsettings\", \"pulseaudio\", \"opengl\",\n        ]\n      }\n    }\n\n    await this.helper.computeDesktopEntry(this.options, \"$snap.$app\", path.join(snapDir, \"setup\", \"gui\", `${snap.name}.desktop`), {\n      \"Icon\": \"${SNAP}/meta/gui/icon.png\"\n    })\n\n    const isUseDocker = process.platform !== \"linux\"\n    snap.parts = {\n      app: {\n        plugin: \"dump\",\n        \"stage-packages\": [\"libappindicator1\", \"libdbusmenu-glib4\", \"libnotify4\", \"libunity9\", \"libgconf-2-4\", \"libnss3\", \"libxss1\", \"fontconfig-config\", \"libnotify-bin\"],\n        source: isUseDocker ? `/out/${path.basename(snapDir)}` : appOutDir,\n        filesets: {\n          app: [`${appOutDir}/*`],\n        },\n        after: [\"desktop-glib-only\"]\n      }\n    }\n\n    const snapcraft = path.join(snapDir, \"snapcraft.yaml\")\n    await writeFile(snapcraft, safeDump(snap))\n\n    // const args = [\"snapcraft\", path.relative(snapDir)]\n    // snap /out/${path.basename(snapDir)} --output /out/${path.basename(resultFile)}\n    if (isUseDocker) {\n      await spawn(\"docker\", [\"run\", \"--rm\",\n        \"-v\", `${packager.info.projectDir}:/project`,\n        \"-v\", `${homedir()}/.electron:/root/.electron`,\n        // dist dir can be outside of project dir\n        \"-v\", `${this.outDir}:/out`,\n        \"-w\", `/out/${path.basename(snapDir)}`,\n        \"electronuserland/electron-builder:latest\",\n        \"/bin/bash\", \"-c\", `env && snapcraft snap`], {\n        cwd: packager.info.projectDir,\n      })\n    }\n    else {\n      await spawn(\"snapcraft\", [\"snap\"], {\n        cwd: snapDir,\n      })\n    }\n\n    const snapName = `${snap.name}_${snap.version}_${toDebArch(arch)}.snap`\n    const resultFile = path.join(this.outDir, snapName)\n    await rename(path.join(snapDir, snapName), resultFile)\n    packager.dispatchArtifactCreated(resultFile)\n  }\n}"
  ]
}
