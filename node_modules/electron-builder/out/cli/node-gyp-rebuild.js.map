{
  "version": 3,
  "file": "node-gyp-rebuild.js",
  "sourceRoot": "",
  "sources": [
    "../../src/cli/node-gyp-rebuild.ts"
  ],
  "names": [],
  "mappings": ";;;;;;;;;sEAiBA,AAAK;AACH,cAAM,AAAI,OAAG,AAAI,KAAC,AAAI,QAAI,AAAO,QAAC,AAAI;AACtC,AAAG,AAAC,6EAAqC,AAAI,IAAE,AAAC;AAChD,gDAAW,AAAO,QAAC,AAAQ,aAAK,AAAO,UAAG,AAAc,iBAAG,AAAU,YAAE,CAAC,AAAS,AAAC;AAChF,AAAG,iBAAE,AAAS,wCAAC,MAAM,AAAkB,iDAAC,MAAM,AAAe,mEAAC,AAAc,AAAC,kBAAE,AAAc,AAAC,kBAAE,AAAI,MAAE,AAAI,AAAC,AAC5G,AAAC,AACJ;AAHsF,SAA9E,AAAI;AAGX;;;;;;;;;AAtBD,AAAO,AAAE,AAAkB,AAAE,AAAI,AAAE,AAAM,AAAc;;;;;;AACvD,AAAO,AAAE,AAAiB,AAAE,AAAM,AAAiB;;;;AACnD,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAC5B,AAAO,AAAK,AAAM,AAAO;;;;;;AACzB,AAAO,AAAE,AAAe,AAAE,AAAM,AAAyB;;;;;;AACzD,AAAO,AAAE,AAAG,AAAE,AAAM,AAAa;;;;;;AACjC,AAAO,AAAE,AAAS,AAAE,AAAM,AAAS;;;;;;;;AAEnC,MAAM,AAAI,yCACP,AAAM,OAAC,AAAM;AACZ,AAAO,aAAE,CAAC,AAAM,QAAE,AAAK,OAAE,AAAQ,AAAC,AACnC,AAAC;AAFc,CADA,AAAK,EAGlB,AAAI;AAET,MAAM,AAAU,aAAG,AAAO,QAAC,AAAG,AAAE;AAChC,MAAM,AAAc,iBAAG,AAAI,MAAC,AAAI,KAAC,AAAU,YAAE,AAAc,AAAC;;AAU5D,AAAI,AAAE,OACH,AAAK,AAAC,AAAiB,AAAC",
  "sourcesContent": [
    "#! /usr/bin/env node\nimport { getElectronVersion, exec } from \"../util/util\"\nimport { printErrorAndExit } from \"../util/promise\"\nimport * as path from \"path\"\nimport yargs from \"yargs\"\nimport { readPackageJson } from \"../util/readPackageJson\"\nimport { log } from \"../util/log\"\nimport { getGypEnv } from \"../yarn\"\n\nconst args: any = yargs\n  .option(\"arch\", {\n    choices: [\"ia32\", \"x64\", \"armv7l\"],\n  }).argv\n\nconst projectDir = process.cwd()\nconst devPackageFile = path.join(projectDir, \"package.json\")\n\nasync function main() {\n  const arch = args.arch || process.arch\n  log(`Execute node-gyp rebuild for arch ${arch}`)\n  await exec(process.platform === \"win32\" ? \"node-gyp.cmd\" : \"node-gyp\", [\"rebuild\"], {\n    env: getGypEnv(await getElectronVersion(await readPackageJson(devPackageFile), devPackageFile), arch, true),\n  })\n}\n\nmain()\n  .catch(printErrorAndExit)"
  ]
}
