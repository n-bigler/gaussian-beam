{
  "version": 3,
  "file": "restApiRequest.js",
  "sourceRoot": "",
  "sources": [
    "../../src/publish/restApiRequest.ts"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "import * as https from \"https\"\nimport { RequestOptions } from \"https\"\nimport { IncomingMessage, ClientRequest } from \"http\"\nimport { addTimeOutHandler } from \"../util/httpRequest\"\nimport BluebirdPromise from \"bluebird-lst-c\"\nimport { Url } from \"url\"\nimport { safeLoad } from \"js-yaml\"\nimport _debug from \"debug\"\nimport Debugger = debug.Debugger\nimport { parse as parseUrl } from \"url\"\n\nconst debug: Debugger = _debug(\"electron-builder\")\n\nexport function githubRequest<T>(path: string, token: string | null, data: { [name: string]: any; } | null = null, method: string = \"GET\"): Promise<T> {\n  return request<T>({hostname: \"api.github.com\", path: path}, token, data, method)\n}\n\nexport function bintrayRequest<T>(path: string, auth: string | null, data: { [name: string]: any; } | null = null, method: string = \"GET\"): Promise<T> {\n  return request<T>({hostname: \"api.bintray.com\", path: path}, auth, data, method)\n}\n\nexport function request<T>(url: Url, token: string | null = null, data: { [name: string]: any; } | null = null, method: string = \"GET\"): Promise<T> {\n  const options: any = Object.assign({\n    method: method,\n    headers: {\n      \"User-Agent\": \"electron-builder\"\n    }\n  }, url)\n\n  if (url.hostname!!.includes(\"github\") && !url.path!.endsWith(\".yml\")) {\n    options.headers.Accept = \"application/vnd.github.v3+json\"\n  }\n\n  const encodedData = data == null ? null : new Buffer(JSON.stringify(data))\n  if (encodedData != null) {\n    options.method = \"post\"\n    options.headers[\"Content-Type\"] = \"application/json\"\n    options.headers[\"Content-Length\"] = encodedData.length\n  }\n  return doApiRequest<T>(options, token, it => it.end(encodedData))\n}\n\nexport function doApiRequest<T>(options: RequestOptions, token: string | null, requestProcessor: (request: ClientRequest, reject: (error: Error) => void) => void, redirectCount: number = 0): Promise<T> {\n  debug(`HTTPS request: ${JSON.stringify(options, null, 2)}`)\n\n  if (token != null) {\n    (<any>options.headers).authorization = token.startsWith(\"Basic\") ? token : `token ${token}`\n  }\n\n  return new BluebirdPromise<T>((resolve, reject, onCancel) => {\n    const request = https.request(options, (response: IncomingMessage) => {\n      try {\n        if (response.statusCode === 404) {\n          // error is clear, we don't need to read detailed error description\n          reject(new HttpError(response, `method: ${options.method} url: https://${options.hostname}${options.path}\n\nPlease double check that your authentication token is correct. Due to security reasons actual status maybe not reported, but 404.\n`))\n        }\n        else if (response.statusCode === 204) {\n          // on DELETE request\n          resolve()\n          return\n        }\n\n        const redirectUrl = response.headers.location\n        if (redirectUrl != null) {\n          if (redirectCount > 10) {\n            reject(new Error(\"Too many redirects (> 10)\"))\n            return\n          }\n\n          if (options.path!.endsWith(\"/latest\")) {\n            resolve(<any>{location: redirectUrl})\n          }\n          else {\n            doApiRequest(Object.assign({}, options, parseUrl(redirectUrl)), token, requestProcessor)\n              .then(<any>resolve)\n              .catch(reject)\n          }\n          return\n        }\n\n        let data = \"\"\n        response.setEncoding(\"utf8\")\n        response.on(\"data\", (chunk: string) => {\n          data += chunk\n        })\n\n        response.on(\"end\", () => {\n          try {\n            const contentType = response.headers[\"content-type\"]\n            const isJson = contentType != null && contentType.includes(\"json\")\n            if (response.statusCode >= 400) {\n              if (isJson) {\n                reject(new HttpError(response, JSON.parse(data)))\n              }\n              else {\n                reject(new HttpError(response))\n              }\n            }\n            else {\n              resolve(data.length === 0 ? null : (isJson || !options.path!.includes(\".yml\")) ? JSON.parse(data) : safeLoad(data))\n            }\n          }\n          catch (e) {\n            reject(e)\n          }\n        })\n      }\n      catch (e) {\n        reject(e)\n      }\n    })\n    addTimeOutHandler(request, reject)\n    request.on(\"error\", reject)\n    requestProcessor(request, reject)\n    onCancel!(() => request.abort())\n  })\n}\n\nexport class HttpError extends Error {\n  constructor(public response: IncomingMessage, public description: any = null) {\n    super(response.statusCode + \" \" + response.statusMessage + (description == null ? \"\" : (\"\\n\" + JSON.stringify(description, <any>null, \"  \"))) + \"\\nHeaders: \" + JSON.stringify(response.headers, <any>null, \"  \"))\n  }\n}"
  ]
}
