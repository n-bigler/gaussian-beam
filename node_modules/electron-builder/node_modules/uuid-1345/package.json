{
  "name": "uuid-1345",
  "version": "0.99.6",
  "description": "Generate UUIDs of versions 1, 3, 4, and 5.",
  "keywords": [
    "uuid",
    "guid",
    "rfc4122",
    "uuid-v1",
    "uuid-v3",
    "uuid-v4",
    "uuid-v5"
  ],
  "main": "index.js",
  "scripts": {
    "prepublish": "gulp test",
    "test": "gulp test"
  },
  "author": {
    "name": "Julian Fleischer"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/scravy/uuid-1345.git"
  },
  "bugs": {
    "url": "https://github.com/scravy/uuid-1345/issues"
  },
  "homepage": "https://github.com/scravy/uuid-1345",
  "dependencies": {
    "macaddress": "^0.2.7"
  },
  "devDependencies": {
    "async": "^0.9.0",
    "gulp": "^3.8.11",
    "gulp-istanbul": "^0.7.0",
    "gulp-istanbul-enforcer": "^1.0.3",
    "gulp-jshint": "^1.9.4",
    "gulp-mocha": "^2.0.1",
    "knuth-shuffle": "^1.0.1",
    "sprintf-js": "^1.0.2",
    "node-uuid": "^1.4.3"
  },
  "readme": "uuid-1345\n==========\n\n[![Build Status](https://travis-ci.org/scravy/uuid-1345.svg?branch=master)](https://travis-ci.org/scravy/uuid-1345)\n\nGenerate `v1`, `v3`, `v4`, and `v5` UUIDs, strictly conforming\nto [RFC 4122](http://tools.ietf.org/html/rfc4122).\n\n    npm install --save uuid-1345\n\nFeatures:\n\n+ Actually uses your MAC address for `v1` UUIDs\n+ Synchronous + Asynchronous API\n+ Returns `string` or `Buffer`, as you wish\n+ Works in NodeJS + io.js (see build status above)\n+ Allows you to inspect uuids (check the `check` function)\n+ It's really fast (see [here](https://travis-ci.org/scravy/uuid-1345/jobs/56819874#L312),\n  [here](https://travis-ci.org/scravy/uuid-1345/jobs/56819875#L312),\n  and [here](https://travis-ci.org/scravy/uuid-1345/jobs/56819876#L312))\n\nUn-Features:\n\n+ Does not work in the browser due to the use of NodeJS's `crypto` module.\n\nExamples\n--------\n\n```JavaScript\nvar UUID = require('uuid-1345');\n\nUUID.v1(function (err, result) {\n    console.log(\"Generated a time-based UUID:\\n\\t%s\\n\", result);\n});\n\nUUID.v4(function (err, result) {\n    console.log(\"Generated a random UUID:\\n\\t%s\\n\", result);\n});\n\nUUID.v3({\n    namespace: UUID.namespace.url,\n    name: \"https://github.com/scravy/uuid-1345\"\n}, function (err, result) {\n    console.log(\"Generated a name-based UUID using MD5:\\n\\t%s\\n\", result);\n});\n\nUUID.v5({\n    namespace: UUID.namespace.url,\n    name: \"https://github.com/scravy/uuid-1345\"\n}, function (err, result) {\n    console.log(\"Generated a name-based UUID using SHA1:\\n\\t%s\\n\", result);\n});\n\n```\n\nmight result in:\n\n    Generated a time-based UUID:\n        9e3a0460-d72d-11e4-a631-c8e0eb141dab\n\n    Generated a random UUID:\n        366a77ba-d506-4a03-a730-318b8e6be8c5\n                \n    Generated a name-based UUID using MD5:\n        2c1d43b8-e6d7-376e-af7f-d4bde997cc3f\n\n    Generated a name-based UUID using SHA1:\n        39888f87-fb62-5988-a425-b2ea63f5b81e\n\n\n### object-oriented `UUID` interface\n\n```JavaScript\nvar uuid = new UUID('39888f87-fb62-5988-a425-b2ea63f5b81e');\nconsole.log( uuid.version    );\nconsole.log( uuid.variant    );\nconsole.log( uuid.toString() );\nconsole.log( uuid.toBuffer() );\n```\n\n```JavaScript\n5\nrfc4122\n39888f87-fb62-5988-a425-b2ea63f5b81e\n<Buffer 39 88 8f 87 fb 62 59 88 a4 25 b2 ea 63 f5 b8 1e>\n```\n\nAPI\n---\n\n```JavaScript\nUUID.vX([options], [callback]);\n```\n\nwhere `vX` is one of `v1`, `v3`, `v4`, or `v5`.\n\n`callback` is always optional, you can use the API asynchronously and synchronously.\n\n`options` that are recognized by every generator are:\n\n**`encoding: 'ascii' | 'binary' | 'object'`**\n\nBy default the generated UUIDs are ASCII strings.\n\nYou can change this to a `Buffer` object by specifying `binary`.\n\nOr to a `UUID` object by specifying `object`.\n\n---\n\n### `UUID.v1([options], [callback])`\n\nGenerates a time based UUID. Note that you can not generate more than\n10000 UUIDs per second. Should this (highly unlikely) scenario happen,\nthe uuid generator will automatically postpone your request until new UUIDs\nare available.\n\n#### Options:\n\n**`mac: false | string | Buffer`**\n\nBy default this generator will try to use your mac address (the mac address\nof your primary network interface). It does so using\n[node-macaddress](https://www.npmjs.com/package/node-macaddress). If it can\nnot obtain your MAC address it will generate a random value according to\n[RFC 4122 § 4.5](http://tools.ietf.org/html/rfc4122#section-4.5) and keep that\nas node id during the lifetime of your process.\n\nThe latter behaviour can be enforced by specifying `{ mac: false }`.\n\nIt is also possible to provide a custom MAC address: `{ mac: 'ac:00:00:ac:ff:ff' }`.\n\nThe MAC address can also be specified as a `Buffer` of 6 bytes.\n\n**`clockSeq: integer`**\n\nThe `clockSeq` is initialized with an arbitrary number.\nYou can specify a custom value for `clockSeq`.\n\n---\n\n### `UUID.v4([options], [callback])`\n\nGenerates a random version 4 UUID.\n\nThis generator is backed by Node's `crypto.randomBytes` which is\nmoderately slow (slower than `Math.random`) but has a higher\nquality (the generated UUIDs are less pseudo-random ;-).\n\n---\n\n### `UUID.v4fast()`\n\nGenerated a pseudo-random version 4 UUID. Does not take any options.\nDoes not offer an asynchronous interface.\n\nThis generator is backed by `Math.random()`. It's really fast,\nbut the generated UUIDs are only pseudo-random.\n\n---\n\n### `UUID.v3(options, [cb])` / `UUID.v5(options, [cb])`\n\n#### Options\n\nGenerates a name-based UUID based on a namespace-UUID and an arbitrary name.\nBoth `name` and `namespace` are required options.\n\n**`namespace: uuid as (string | Buffer)`**\n\nThis must be a valid UUID. A few pre-defined namespaces are available in `UUID.namespace`:\n\n```JavaScript\n// from rfc4122#appendix-C\nUUID.namespace = {\n    dns:  \"6ba7b810-9dad-11d1-80b4-00c04fd430c8\",\n    url:  \"6ba7b811-9dad-11d1-80b4-00c04fd430c8\",\n    oid:  \"6ba7b812-9dad-11d1-80b4-00c04fd430c8\",\n    x500: \"6ba7b814-9dad-11d1-80b4-00c04fd430c8\"\n};\n```\n\n**`name: string | Buffer`**\n\nThis can be an arbitrary value (including the empty string).\n\nMore API\n--------\n\n```JavaScript\nUUID.check(uuid) → { version: number, variant: string }\nUUID.parse(uuid as string) → uuid as Buffer\nUUID.stringify(uuid as Buffer) → uuid as string\n```\n",
  "readmeFilename": "README.md",
  "_id": "uuid-1345@0.99.6",
  "_from": "uuid-1345@^0.99.6"
}
