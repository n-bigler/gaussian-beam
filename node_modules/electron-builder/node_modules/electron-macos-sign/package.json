{
  "name": "electron-macos-sign",
  "version": "1.3.4",
  "description": "Codesign Electron macOS apps",
  "main": "index.js",
  "files": [
    "bin",
    "*.js",
    "*.d.ts",
    "*.plist"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/electron-userland/electron-osx-sign.git"
  },
  "author": {
    "name": "sethlu"
  },
  "license": "BSD-2-Clause",
  "bugs": {
    "url": "https://github.com/electron-userland/electron-osx-sign/issues"
  },
  "homepage": "https://github.com/electron-userland/electron-osx-sign",
  "dependencies": {
    "bluebird": "^3.4.6",
    "compare-version": "^0.1.2",
    "debug": "^2.3.2",
    "isbinaryfile": "^3.0.1",
    "minimist": "^1.2.0",
    "plist": "^2.0.1"
  },
  "devDependencies": {
    "electron-download": "^3.0.1",
    "eslint": "^3.10.2",
    "eslint-config-eslint": "^3.0.0",
    "extract-zip": "^1.5.0",
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.4",
    "run-series": "^1.1.4",
    "run-waterfall": "^1.1.3",
    "standard": "^8.5.0",
    "tape": "^4.6.2"
  },
  "scripts": {
    "code-standard": "standard",
    "pretest": "rimraf test/work",
    "test": "standard && tape test"
  },
  "standard": {
    "ignore": [
      "test/work"
    ]
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "readme": "# electron-osx-sign [![npm][npm_img]][npm_url] [![Build Status][travis_img]][travis_url]\n\nCodesign Electron macOS apps\n\n## About\n\n[`electron-osx-sign`][electron-osx-sign] minimizes the extra work needed to eventually prepare your apps for shipping, providing the most basic tools and assets. Note that the bare necessities here are sufficient for enabling app sandbox, yet other configurations for like network access require additional work.\n\nIt is worth noting as well that starting from [Electron] v1.1.1, a new mechanism was introduced to satisfy IPC communications (see [electron#5601](https://github.com/electron/electron/pull/5601)); wish to have full support of legacy Electron versions, please utilize `opts.version`, which option brings less hassle with making default settings among Electron builds.\n\nWe are trying to keep updated to the Electron specifications; please [file us an issue](https://github.com/electron-userland/electron-osx-sign/issues/new) if having any suggestions or experiencing difficulties code signing your products.\n\nPlease visit our [Wiki](https://github.com/electron-userland/electron-osx-sign/wiki) hosted here on GitHub for walk-throughs and notes from past projects shipped with [`electron-packager`][electron-packager] and [`electron-osx-sign`][electron-osx-sign].\n\n*NB: The signing procedure implemented in this package is based on what described in [Mac App Store Submission Guide](https://github.com/atom/electron/blob/master/docs/tutorial/mac-app-store-submission-guide.md).*\n\n### An [OPEN Open Source Project](http://openopensource.org/)\n\nIndividuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\n### Collaborators\n\nThanks to [seanchas116](https://github.com/seanchas116), [jasonhinkle](https://github.com/jasonhinkle), and [develar](https://github.com/develar) for improving the usability of this project implementation.\n\n## Installation\n\n```sh\n# For use in npm scripts\nnpm install --save electron-osx-sign\n```\n\n```sh\n# For use from CLI\nnpm install -g electron-osx-sign\n```\n\n*Note: `electron-osx-sign` is a dependency of `electron-packager` as of 6.0.0 for signing apps on macOS. However, feel free to install this package globally for more customization beyond specifying identity and entitlements.*\n\n## Usage\n\n### electron-osx-sign\n\n#### From the Command Line\n\n```sh\nelectron-osx-sign app [embedded-binary ...] [options ...]\n```\n\nExample:\n\n```sh\nelectron-osx-sign path/to/my.app\n```\n\nThe script above being sufficient, it is, however, recommended to make use of `opts.version` while signing for example:\n\n```sh\nelectron-osx-sign path/to/my.app --version=1.2.0\n```\n\nRun `electron-osx-sign --help` or see [electron-osx-sign-usage.txt](https://github.com/electron-userland/electron-osx-sign/blob/master/bin/electron-osx-sign-usage.txt) for CLI-specific options.\n\n#### From the API\n\n```javascript\nvar sign = require('electron-osx-sign')\nsign(opts[, function done (err) {}])\n```\n\nExample:\n\n```javascript\nvar sign = require('electron-osx-sign')\nsign({\n  app: 'path/to/my.app'\n}, function done (err) {\n  if (err) {\n    // Handle the error\n    return;\n  }\n  // Application signed\n})\n```\n\nFrom release v0.4.0-beta, [Bluebird] promises are introduced for better async method calls; the following is also available for use.\n\n```javascript\nvar signAsync = require('electron-osx-sign').signAsync\nsignAsync(opts)\n  [.then(function () {})]\n  [.catch(function (err) {})]\n```\n\nExample:\n\n```javascript\nvar signAsync = require('electron-osx-sign').signAsync\nsignAsync({\n  app: 'path/to/my.app'\n})\n  .then(function () {\n    // Application signed\n  })\n  .catch(function (err) {\n    // Handle the error\n  })\n```\n\n###### opts - Options\n\n**Required**\n\n`app` - *String*\n\nPath to the application package.\nNeeds file extension `.app`.\n\n**Optional**\n\n`binaries` - *Array*\n\nPath to additional binaries that will be signed along with built-ins of Electron.\nDefault to `undefined`.\n\n`entitlements` - *String*\n\nPath to entitlements file for signing the app.\nDefault to built-in entitlements file, Sandbox enabled for Mac App Store platform.\nSee [default.entitlements.mas.plist](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.plist) or [default.entitlements.darwin.plist](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.plist) with respect to your platform.\n\n`entitlements-inherit` - *String*\n\nPath to child entitlements which inherit the security settings for signing frameworks and bundles of a distribution. *This option only applies when signing with entitlements.*\nSee [default.entitlements.mas.inherit.plist](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.mas.inherit.plist) or [default.entitlements.darwin.inherit.plist](https://github.com/electron-userland/electron-osx-sign/blob/master/default.entitlements.darwin.inherit.plist) with respect to your platform.\n\n`identity` - *String*\n\nName of certificate to use when signing.\nDefault to be selected with respect to `provisioning-profile` and `platform` from `keychain` or keychain by system default.\n\nSigning platform `mas` will look for `3rd Party Mac Developer Application: * (*)`, and platform `darwin` will look for `Developer ID Application: * (*)` by default.\n\n`keychain` - *String*\n\nThe keychain name.\nDefault to system default keychain.\n\n`ignore` - *String*\n\nRegex or function that signals ignoring a file before signing.\nDefault to `undefined`.\n\n`gatekeeper-assess` - *Boolean*\n\nFlag to enable Gatekeeper assessment after signing the app. Disabling it is useful for signing with self-signed certificates.\nGatekeeper assessment is enabled by default on `darwin` platform.\nDefault to `true`.\n\n`platform` - *String*\n\nBuild platform of Electron.\nAllowed values: `darwin`, `mas`.\nDefault to auto detect by presence of `Squirrel.framework` within the application bundle.\n\n`pre-auto-entitlements` - *Boolean*\n\nFlag to enable automation of `com.apple.security.application-groups` in entitlements file and update `Info.plist` with `ElectronTeamID`.\nAllowed values: `true`, `false`.\nDefault to `true`.\n\n`pre-embed-provisioning-profile` - *Boolean*\n\nFlag to enable embedding of provisioning profile in the current working directory.\nAllowed values: `true`, `false`.\nDefault to `true`.\n\n`provisioning-profile` - *String*\n\nPath to provisioning profile.\n\n`requirements` - *String*\n\nSpecify the criteria that you recommend to be used to evaluate the code signature.\nSee more info from https://developer.apple.com/library/mac/documentation/Security/Conceptual/CodeSigningGuide/RequirementLang/RequirementLang.html\nDefault to `undefined`.\n\n`type` - *String*\n\nSpecify whether to sign app for development or for distribution.\nAllowed values: `development`, `distribution`.\nDefault to `distribution`.\n\n`version` - *String*\n\nBuild version of Electron.\nValues may be like: `1.1.1`, `1.2.0`.\nDefault to latest Electron version.\n\nIt is recommended to utilize this option for best support of specific Electron versions. This may trigger pre/post operations for signing: For example, automation of setting `com.apple.security.application-groups` in entitlements file and of updating `Info.plist` with `ElectronTeamID` is enabled for all versions starting from `1.1.1`; set `pre-auto-entitlements` option to `false` to disable this feature.\n\n###### cb - Callback\n\n`err` - *Error*\n\n### electron-osx-flat\n\n#### From the Command Line\n\n```sh\nelectron-osx-flat app [options ...]\n```\n\nExample:\n\n```sh\nelectron-osx-flat path/to/my.app\n```\n\nRun `electron-osx-flat --help` or see [electron-osx-flat-usage.txt](https://github.com/electron-userland/electron-osx-sign/blob/master/bin/electron-osx-flat-usage.txt) for CLI-specific options.\n\n#### From the API\n\n```javascript\nvar flat = require('electron-osx-sign').flat\nflat(opts[, function done (err) {}])\n```\n\nExample:\n\n```javascript\nvar flat = require('electron-osx-sign').flat\nflat({\n  app: 'path/to/my.app'\n}, function done (err) {\n  if (err) {\n    // Handle the error\n    return;\n  }\n  // Application flattened\n})\n```\n\nFrom release v0.4.0-beta, [Bluebird] promises are introduced for better async method calls; the following is also available for use.\n\n```javascript\nvar flatAsync = require('electron-osx-sign').flatAsync\nflatAsync(opts)\n  [.then(function () {})]\n  [.catch(function (err) {})]\n```\n\nExample:\n\n```javascript\nvar flatAsync = require('electron-osx-sign').flatAsync\nflatAsync({\n  app: 'path/to/my.app'\n})\n  .then(function () {\n    // Application flattened\n  })\n  .catch(function (err) {\n    // Handle the error\n  })\n```\n\n###### opts - Options\n\n**Required**\n\n`app` - *String*\n\nPath to the application bundle.\nNeeds file extension `.app`.\n\n**Optional**\n\n`identity` - *String*\n\nName of certificate to use when signing.\nDefault to be selected with respect to `platform` from `keychain` or keychain by system default.\n\nFlattening platform `mas` will look for `3rd Party Mac Developer Installer: * (*)`, and platform `darwin` will look for `Developer ID Installer: * (*)` by default.\n\n`install` - *String*\n\nPath to install the bundle.\nDefault to `/Applications`.\n\n`keychain` - *String*\n\nThe keychain name.\nDefault to system default keychain.\n\n`platform` - *String*\n\nBuild platform of Electron. Allowed values: `darwin`, `mas`.\nDefault to auto detect by presence of `Squirrel.framework` within the application bundle.\n\n`pkg` - *String*\n\nPath to the output the flattened package.\nNeeds file extension `.pkg`.\n\n`scripts` - *String*\nPath to a directory containing pre and/or post install scripts.\n\n###### cb - Callback\n\n`err` - *Error*\n\n## Debug\n\nAs of release v0.3.1, external module `debug` is used to display logs and messages; remember to `export DEBUG=electron-osx-sign*` when necessary.\n\n## Test\n\nAs developer certificates are required for `codesign` on macOS, this module is difficult to be tested via online build services. If you wish to test out this module, enter:\n\n```\nnpm test\n```\n\nfrom the dev directory, and tell us if all tests should pass.\n\nWhen this command is fun for the first time: `electron-download` will download all major releases of Electron available for macOS from 0.24.0, and save to `~/.electron/`, which might take up less than 1GB of disk space.\n\nA successful testing should look something like:\n\n```\n$ npm test\n\n> electron-osx-sign@0.4.1 pretest electron-osx-sign\n> rimraf test/work\n\n> electron-osx-sign@0.4.1 test electron-osx-sign\n> standard && tape test\n\nCalling electron-download before running tests...\nRunning tests...\nTAP version 13\n# setup\n# defaults-test:v0.29.2-darwin-x64\nok 1 app signed\nok 2 app flattened\n# defaults-test:v0.30.8-darwin-x64\nok 3 app signed\nok 4 app flattened\n# defaults-test:v0.31.2-darwin-x64\nok 5 app signed\nok 6 app flattened\n# defaults-test:v0.32.3-darwin-x64\nok 7 app signed\nok 8 app flattened\n# defaults-test:v0.33.9-darwin-x64\nok 9 app signed\nok 10 app flattened\n# defaults-test:v0.34.5-darwin-x64\nok 11 app signed\nok 12 app flattened\n# defaults-test:v0.34.5-mas-x64\nok 13 app signed\nok 14 app flattened\n# defaults-test:v0.35.6-darwin-x64\nok 15 app signed\nok 16 app flattened\n# defaults-test:v0.35.6-mas-x64\nok 17 app signed\nok 18 app flattened\n# defaults-test:v0.36.12-darwin-x64\nok 19 app signed\nok 20 app flattened\n# defaults-test:v0.36.12-mas-x64\nok 21 app signed\nok 22 app flattened\n# defaults-test:v0.37.8-darwin-x64\nok 23 app signed\nok 24 app flattened\n# defaults-test:v0.37.8-mas-x64\nok 25 app signed\nok 26 app flattened\n# defaults-test:v1.0.2-darwin-x64\nok 27 app signed\nok 28 app flattened\n# defaults-test:v1.0.2-mas-x64\nok 29 app signed\nok 30 app flattened\n# defaults-test:v1.1.3-darwin-x64\nok 31 app signed\nok 32 app flattened\n# defaults-test:v1.1.3-mas-x64\nok 33 app signed\nok 34 app flattened\n# defaults-test:v1.2.8-darwin-x64\nok 35 app signed\nok 36 app flattened\n# defaults-test:v1.2.8-mas-x64\nok 37 app signed\nok 38 app flattened\n# defaults-test:v1.3.7-darwin-x64\nok 39 app signed\nok 40 app flattened\n# defaults-test:v1.3.7-mas-x64\nok 41 app signed\nok 42 app flattened\n# defaults-test:v1.4.4-darwin-x64\nok 43 app signed\nok 44 app flattened\n# defaults-test:v1.4.4-mas-x64\nok 45 app signed\nok 46 app flattened\n# teardown\n\n1..46\n# tests 46\n# pass  46\n\n# ok\n```\n\n## Related\n\n- [electron-packager] - Package your electron app in OS executables (.app, .exe, etc) via JS or CLI\n- [electron-builder] - A complete solution to package and build a ready for distribution Electron app with “auto update” support out of the box\n\n[Bluebird]: https://github.com/petkaantonov/bluebird\n[Electron]: https://github.com/electron/electron\n[electron-builder]: https://github.com/electron-userland/electron-builder\n[electron-packager]: https://github.com/electron-userland/electron-packager\n[electron-osx-sign]: https://github.com/electron-userland/electron-osx-sign\n[npm_img]: https://img.shields.io/npm/v/electron-osx-sign.svg\n[npm_url]: https://npmjs.org/package/electron-osx-sign\n[travis_img]: https://travis-ci.org/electron-userland/electron-osx-sign.svg?branch=master\n[travis_url]: https://travis-ci.org/electron-userland/electron-osx-sign\n",
  "readmeFilename": "README.md",
  "_id": "electron-macos-sign@1.3.4",
  "_from": "electron-macos-sign@^1.3.4"
}
